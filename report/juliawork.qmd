---
title: "Prelim analysis "
author: "Julia Vitale"
format: pdf
execute: 
  warning: false
  message: false
editor: visual
---

```{r}
library(reticulate)
library(tidyverse)
library(here)
library(broom)
#read in data
df <- read_csv(here('data', 'ulti_clean.csv'))


#fit grouped/nested linear regression models

models <- df %>%
  group_by(division) %>%
  nest() %>%
  mutate(model = map(data, ~ lm(pls_mns_per_game ~ ds_per_game + ast_per_game + pts_per_game + turns_per_game, data = .x)))

#make dataframe with coefficients
coefficients_df <- models %>%
  mutate(tidy_model = map(model, broom::tidy)) %>%
  unnest(tidy_model) %>%
  select(division, term, estimate) %>%
  pivot_wider(names_from = term, values_from = estimate)

model_metrics <- models %>%
  mutate(
    glance = map(model, glance),
    mse = map_dbl(model, ~ mean(residuals(.x)^2))
  ) %>%
  unnest(glance) %>%
  select(division, r.squared, mse)

linear_df <- coefficients_df %>%
  left_join(model_metrics, by = c("division")) %>%
  mutate(type = "Linear")


```


```{python}
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np

ultimate_data = r.df
```

```{python}
def linear_reg(ultimate_data, test_size=0.2, random_state=42):
    feature_cols = ['turns_per_game', 'ds_per_game', 'ast_per_game', 'pts_per_game']
    target_col = 'pls_mns_per_game'

    data_clean = ultimate_data[feature_cols + [target_col]].dropna()

    X = data_clean[feature_cols]
    y = data_clean[target_col]

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=test_size, random_state=random_state)

    model = LinearRegression()
    model.fit(X_train, y_train)

    score = model.score(X_test, y_test)
    coef = dict(zip(feature_cols, model.coef_))
    intercept = model.intercept_

    return {
        'model': model,
        'score (R^2)': score,
        'coefficients': coef,
        'intercept': intercept,
        'scaler': scaler
    }
    
results_linear = linear_reg(ultimate_data)

```
```{python}
def linear_by_div_gender(ultimate_data, test_size=0.2, random_state=42):
    feature_cols = ['turns_per_game', 'ds_per_game', 'ast_per_game', 'pts_per_game']
    target_col = 'pls_mns_per_game'

    results_linear = {}

    for (division, gender), group in ultimate_data.groupby(['level', 'gender']):
        group_clean = group[feature_cols + [target_col]].dropna()

        if len(group_clean) < 5:
            continue

        X = group_clean[feature_cols]
        y = group_clean[target_col]

        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        X_train, X_test, y_train, y_test = train_test_split(
            X_scaled, y, test_size=test_size, random_state=random_state
        )

        model = LinearRegression()
        model.fit(X_train, y_train)

        results_linear[(division, gender)] = {
            'model': model,
            'score (R^2)': model.score(X_test, y_test),
            'coefficients': dict(zip(feature_cols, model.coef_)),
            'intercept': model.intercept_,
            'scaler': scaler,
            'n_samples': len(group_clean)
        }

    return results_linear


resultsdg_linear = linear_by_div_gender(ultimate_data)

```
```{python}

for (level, gender), res in resultsdg.items():
    print(f"{level} {gender} — R²: {res['score (R^2)']:.3f}")
    for feat, coef in res['coefficients'].items():
        print(f"    {feat}: {coef:.3f}")
    print()

```
```{python}
def predict_plus_minus(ultimate_data, level, gender, player_stats, ridge_results, linear_results):
    feature_cols = ['turns_per_game', 'ds_per_game', 'ast_per_game', 'pts_per_game']
    
    if (level, gender) not in ridge_results:
        raise ValueError(f"No Ridge model available for {level} {gender}")
    if (level, gender) not in linear_results:
        raise ValueError(f"No Linear model available for {level} {gender}")

    ridge_model = ridge_results[(level, gender)]['model']
    ridge_scaler = ridge_results[(level, gender)]['scaler']

    linear_model = linear_results[(level, gender)]['model']
    linear_scaler = linear_results[(level, gender)]['scaler']

    player_df = pd.DataFrame([player_stats], columns=feature_cols)

    ridge_scaled = ridge_scaler.transform(player_df)
    linear_scaled = linear_scaler.transform(player_df)

    predicted_ridge = ridge_model.predict(ridge_scaled)[0]
    predicted_linear = linear_model.predict(linear_scaled)[0]

    return {
        'ridge': predicted_ridge,
        'linear': predicted_linear
    }

```


